name: ci

env:
  VERSION: v1.0.7

on:
  push:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Extract Dockerfile versions
        id: extract_versions
        run: |
          VERSION_YES=$(grep 'LABEL version.yes' Dockerfile | awk -F"=" '{print $2}' | tr -d '"')
          VERSION_NO=$(grep 'LABEL version.no' Dockerfile | awk -F"=" '{print $2}' | tr -d '"')
          echo "::set-output name=VERSION_YES::$VERSION_YES"
          echo "::set-output name=VERSION_NO::$VERSION_NO"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set outputs
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/action-test:${{ env.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/action-test:latest

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: |
            Changes in this Release
            - Version Yes: ${{ inputs.VERSION_YES }}
            - Version No: ${{ inputs.VERSION_NO }}
          draft: false
          prerelease: false


